diff --git a/node_modules/eslint-plugin-react/lib/rules/jsx-no-literals.js b/node_modules/eslint-plugin-react/lib/rules/jsx-no-literals.js
index d6bff3a..11ca0d3 100644
--- a/node_modules/eslint-plugin-react/lib/rules/jsx-no-literals.js
+++ b/node_modules/eslint-plugin-react/lib/rules/jsx-no-literals.js
@@ -3,6 +3,7 @@
  * @author Caleb Morris
  * @author David Buchan-Swanson
  */
+
 'use strict';
 
 const docsUrl = require('../util/docsUrl');
@@ -11,6 +12,10 @@ const docsUrl = require('../util/docsUrl');
 // Rule Definition
 // ------------------------------------------------------------------------------
 
+function trimIfString(val) {
+  return typeof val === 'string' ? val.trim() : val;
+}
+
 module.exports = {
   meta: {
     docs: {
@@ -25,24 +30,37 @@ module.exports = {
       properties: {
         noStrings: {
           type: 'boolean'
+        },
+        allowedStrings: {
+          type: 'array',
+          uniqueItems: true,
+          items: {
+            type: 'string'
+          }
+        },
+        validateProps: {
+          type: 'boolean'
         }
       },
       additionalProperties: false
     }]
   },
 
-  create: function(context) {
-    const isNoStrings = context.options[0] ? context.options[0].noStrings : false;
-    const sourceCode = context.getSourceCode();
+  create(context) {
+    const defaults = {noStrings: false, allowedStrings: [], validateProps: false};
+    const config = Object.assign({}, defaults, context.options[0] || {});
+    config.allowedStrings = new Set(config.allowedStrings.map(trimIfString));
 
-    const message = isNoStrings ?
+    const message = config.noStrings ?
       'Strings not allowed in JSX files' :
       'Missing JSX expression container around literal string';
 
-    function reportLiteralNode(node) {
+    function reportLiteralNode(node, customMessage) {
+      const errorMessage = customMessage || message;
+
       context.report({
-        node: node,
-        message: `${message}: “${sourceCode.getText(node).trim()}”`
+        node,
+        message: `${errorMessage}: “${context.getSourceCode().getText(node).trim()}”`
       });
     }
 
@@ -55,42 +73,78 @@ module.exports = {
     }
 
     function getValidation(node) {
+      if (config.allowedStrings.has(trimIfString(node.value))) {
+        return false;
+      }
       const parent = getParentIgnoringBinaryExpressions(node);
       const standard = !/^[\s]+$/.test(node.value) &&
           typeof node.value === 'string' &&
           parent.type.indexOf('JSX') !== -1 &&
           parent.type !== 'JSXAttribute';
-      if (isNoStrings) {
+      if (config.noStrings) {
         return standard;
       }
       return standard && parent.type !== 'JSXExpressionContainer';
     }
 
+    function getParentAndGrandParentType(node) {
+      const parent = getParentIgnoringBinaryExpressions(node);
+      const parentType = parent.type;
+      const grandParentType = parent.parent.type;
+
+      return {
+        parent,
+        parentType,
+        grandParentType,
+        grandParent: parent.parent
+      };
+    }
+
+    function hasJSXElementParentOrGrandParent(node) {
+      const parents = getParentAndGrandParentType(node);
+      const parentType = parents.parentType;
+      const grandParentType = parents.grandParentType;
+
+      return (parentType === 'JSXFragment') || (parentType === 'JSXElement' || grandParentType === 'JSXElement');
+    }
+
     // --------------------------------------------------------------------------
     // Public
     // --------------------------------------------------------------------------
 
     return {
-
-      Literal: function(node) {
-        if (getValidation(node)) {
+      Literal(node) {
+        if (getValidation(node) && (hasJSXElementParentOrGrandParent(node) || config.validateProps)) {
           reportLiteralNode(node);
         }
       },
 
-      JSXText: function(node) {
+      JSXAttribute(node) {
+        const isNodeValueString = node.value && node.value && node.value.type === 'Literal' && typeof node.value.value === 'string';
+
+        if (config.noStrings && config.validateProps && isNodeValueString) {
+          const customMessage = 'Invalid attribute value';
+          reportLiteralNode(node, customMessage);
+        }
+      },
+
+      JSXText(node) {
         if (getValidation(node)) {
           reportLiteralNode(node);
         }
       },
 
-      TemplateLiteral: function(node) {
-        const parent = getParentIgnoringBinaryExpressions(node);
-        if (isNoStrings && parent.type === 'JSXExpressionContainer') {
+      TemplateLiteral(node) {
+        const parents = getParentAndGrandParentType(node);
+        const parentType = parents.parentType;
+        const grandParentType = parents.grandParentType;
+        const isParentJSXExpressionCont = parentType === 'JSXExpressionContainer';
+        const isParentJSXElement = parentType === 'JSXElement' || grandParentType === 'JSXElement';
+
+        if (isParentJSXExpressionCont && config.noStrings && (isParentJSXElement || config.validateProps)) {
           reportLiteralNode(node);
         }
       }
-
     };
   }
 };
