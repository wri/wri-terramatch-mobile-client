/*
 * WRI Restoration Marketplace API
 * ### About  This API serves the web and mobile apps for WRI's Restoration Marketplace (AKA TerraMatch).  ### Authentication & Authorisation  JWTs are used for authentication. Upon successful log in a JWT will be provided for you. These expire after 12 hours.  A padlock icon next to an endpoint indicates that it requires an authenticated user. For example:  ![](/images/padlock.png)  ### Requests & Responses  The response bodies documented here will be wrapped in an object adhering to the JSON:API specification.  ### Error Codes  Any errors returned in the body of a response will have a unique code to help identify the type of error. They are:  ``` ACCEPTED, ACTIVE_URL, AFTER, AFTER_OR_EQUAL, ALPHA, ALPHA_DASH, ALPHA_NUM, ARRAY, BEFORE, BEFORE_OR_EQUAL, BETWEEN, BOOLEAN, CARBON_CERTIFICATION_TYPE, CONFIRMED, CONTAIN_LOWER, CONTAIN_NUMBER, CONTAIN_UPPER, CONTINENT, COUNTRY_CODE, CUSTOM, DATE, DATE_EQUALS, DATE_FORMAT, DIFFERENT, DIGITS, DIGITS_BETWEEN, DIMENSIONS, DISTINCT, DOCUMENT_TYPE, EMAIL, ENDS_WITH, EXISTS, FILE, FILLED, FUNDING_BRACKET, FUNDING_SOURCE, GT, GTE, IMAGE, IN, IN_ARRAY, INTEGER, IP, IPV4, IPV6, JSON, LAND_OWNERSHIP, LAND_SIZE, LAND_TYPE, LT, LTE, MAX, MIMES, MIMETYPES, MIN, NOT_IN, NOT_PRESENT, NOT_REGEX, NUMERIC, OTHER_VALUE_PRESENT, OTHER_VALUE_NULL, OTHER_VALUE_STRING, ORGANISATION_CATEGORY, ORGANISATION_TYPE, PRESENT, REGEX, REJECTED_REASON, REPORTING_FREQUENCY, REPORTING_LEVEL, REQUIRED, REQUIRED_IF, REQUIRED_UNLESS, REQUIRED_WITH, REQUIRED_WITH_ALL, REQUIRED_WITHOUT, REQUIRED_WITHOUT_ALL, RESTORATION_GOAL, RESTORATION_METHOD, REVENUE_DRIVER, SAME, SIZE, SOFT_URL, STARTS_WITH, STARTS_WITH_FACEBOOK, STARTS_WITH_TWITTER, STARTS_WITH_INSTAGRAM, STARTS_WITH_LINKEDIN, STRICT_FLOAT, STRING, SUSTAINABLE_DEVELOPMENT_GOAL, TIMEZONE, TREE_SPECIES_OWNER, UNIQUE, UPLOADED, URL, UUID, VISIBILITY ```  ### Uploads  Uploads should first be uploaded to the `/uploads` endpoint. Upon success an ID will be returned, this ID is valid for 1 day. Use this ID in your request body to bind the upload to a property.  ### Elevator Videos  Elevator videos can be created by using the `/elevator_videos` endpoint. After creating an elevator video you will be returned an elevator video ID. Use this to check its status. Elevator videos will start off as `processing` and change to `finished` when it has been build. Once the elevator video is built the `upload_id` property will be present, you can use this just like a regular upload and attach it to a pitch's `video` property. Be sure to use the elevator video's `upload_id` property and not its `id` property. An elevator video's status may end up as `errored` or `timed_out` in which case something has gone wrong.  ### Entity Relationship Diagram  ![](/images/erd.png)  ### Units  * All prices are measured in USD * All land is measured in hectares * All time is measured in months  ### Drafts  When creating a draft the `data` property be equal to a string of JSON containing an empty object. You can then manipulate the `data` property with subsequent updates. When updating a draft you will need to use [JSON Patch](http://jsonpatch.com/) requests to manipulate the `data` property. Operations are relative to the `data` property which means you don't need to preface paths with `/data`. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WriRestorationMarketplaceApi);
  }
}(this, function(expect, WriRestorationMarketplaceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WriRestorationMarketplaceApi.PitchesApi();
  });

  describe('(package)', function() {
    describe('PitchesApi', function() {
      describe('continentsCONTINENTPitchesGet', function() {
        it('should call continentsCONTINENTPitchesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for continentsCONTINENTPitchesGet call and complete the assertions
          /*
          var CONTINENT = "CONTINENT_example";

          instance.continentsCONTINENTPitchesGet(CONTINENT).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('continentsPitchesGet', function() {
        it('should call continentsPitchesGet successfully', function(done) {
          // TODO: uncomment continentsPitchesGet call and complete the assertions
          /*

          instance.continentsPitchesGet().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchByContinentReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('organisationsIDPitchesGet', function() {
        it('should call organisationsIDPitchesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for organisationsIDPitchesGet call and complete the assertions
          /*
          var ID = 56;

          instance.organisationsIDPitchesGet(ID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('organisationsIDPitchesInspectGet', function() {
        it('should call organisationsIDPitchesInspectGet successfully', function(done) {
          // TODO: uncomment, update parameter values for organisationsIDPitchesInspectGet call and complete the assertions
          /*
          var ID = 56;

          instance.organisationsIDPitchesInspectGet(ID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchVersionReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pitchesIDCompletePatch', function() {
        it('should call pitchesIDCompletePatch successfully', function(done) {
          // TODO: uncomment, update parameter values for pitchesIDCompletePatch call and complete the assertions
          /*
          var ID = 56;
          var Body = new WriRestorationMarketplaceApi.PitchComplete();
          Body.successful = false;

          instance.pitchesIDCompletePatch(ID, Body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.organisation_id).to.be.a('number');
            // expect(data.organisation_id).to.be(0);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            {
              let dataCtr = data.land_types;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.land_ownerships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.land_size).to.be.a('string');
            // expect(data.land_size).to.be("");
            expect(data.land_continent).to.be.a('string');
            // expect(data.land_continent).to.be("");
            expect(data.land_country).to.be.a('string');
            // expect(data.land_country).to.be("");
            expect(data.land_geojson).to.be.a('string');
            // expect(data.land_geojson).to.be("");
            {
              let dataCtr = data.restoration_methods;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.restoration_goals;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.funding_sources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.funding_amount).to.be.a('number');
            // expect(data.funding_amount).to.be(0);
            expect(data.funding_bracket).to.be.a('string');
            // expect(data.funding_bracket).to.be("");
            {
              let dataCtr = data.revenue_drivers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.estimated_timespan).to.be.a('number');
            // expect(data.estimated_timespan).to.be(0);
            expect(data.long_term_engagement).to.be.a('boolean');
            // expect(data.long_term_engagement).to.be(false);
            expect(data.reporting_frequency).to.be.a('string');
            // expect(data.reporting_frequency).to.be("");
            expect(data.reporting_level).to.be.a('string');
            // expect(data.reporting_level).to.be("");
            {
              let dataCtr = data.sustainable_development_goals;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.avatar).to.be.a('string');
            // expect(data.avatar).to.be("");
            expect(data.cover_photo).to.be.a('string');
            // expect(data.cover_photo).to.be("");
            expect(data.video).to.be.a('string');
            // expect(data.video).to.be("");
            expect(data.problem).to.be.a('string');
            // expect(data.problem).to.be("");
            expect(data.anticipated_outcome).to.be.a('string');
            // expect(data.anticipated_outcome).to.be("");
            expect(data.who_is_involved).to.be.a('string');
            // expect(data.who_is_involved).to.be("");
            expect(data.local_community_involvement).to.be.a('boolean');
            // expect(data.local_community_involvement).to.be(false);
            expect(data.training_involved).to.be.a('boolean');
            // expect(data.training_involved).to.be(false);
            expect(data.training_type).to.be.a('string');
            // expect(data.training_type).to.be("");
            expect(data.training_amount_people).to.be.a('number');
            // expect(data.training_amount_people).to.be(0);
            expect(data.people_working_in).to.be.a('string');
            // expect(data.people_working_in).to.be("");
            expect(data.people_amount_nearby).to.be.a('number');
            // expect(data.people_amount_nearby).to.be(0);
            expect(data.people_amount_abroad).to.be.a('number');
            // expect(data.people_amount_abroad).to.be(0);
            expect(data.people_amount_employees).to.be.a('number');
            // expect(data.people_amount_employees).to.be(0);
            expect(data.people_amount_volunteers).to.be.a('number');
            // expect(data.people_amount_volunteers).to.be(0);
            expect(data.benefited_people).to.be.a('number');
            // expect(data.benefited_people).to.be(0);
            expect(data.future_maintenance).to.be.a('string');
            // expect(data.future_maintenance).to.be("");
            expect(data.use_of_resources).to.be.a('string');
            // expect(data.use_of_resources).to.be("");
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.completed).to.be.a('boolean');
            // expect(data.completed).to.be(false);
            expect(data.successful).to.be.a('boolean');
            // expect(data.successful).to.be(false);
            expect(data.compatibility_score).to.be.a('number');
            // expect(data.compatibility_score).to.be(0);
            expect(data.price_per_tree).to.be.a('number');
            // expect(data.price_per_tree).to.be(0.0);
            expect(data.visibility).to.be.a('string');
            // expect(data.visibility).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pitchesIDGet', function() {
        it('should call pitchesIDGet successfully', function(done) {
          // TODO: uncomment, update parameter values for pitchesIDGet call and complete the assertions
          /*
          var ID = 56;

          instance.pitchesIDGet(ID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.organisation_id).to.be.a('number');
            // expect(data.organisation_id).to.be(0);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            {
              let dataCtr = data.land_types;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.land_ownerships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.land_size).to.be.a('string');
            // expect(data.land_size).to.be("");
            expect(data.land_continent).to.be.a('string');
            // expect(data.land_continent).to.be("");
            expect(data.land_country).to.be.a('string');
            // expect(data.land_country).to.be("");
            expect(data.land_geojson).to.be.a('string');
            // expect(data.land_geojson).to.be("");
            {
              let dataCtr = data.restoration_methods;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.restoration_goals;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.funding_sources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.funding_amount).to.be.a('number');
            // expect(data.funding_amount).to.be(0);
            expect(data.funding_bracket).to.be.a('string');
            // expect(data.funding_bracket).to.be("");
            {
              let dataCtr = data.revenue_drivers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.estimated_timespan).to.be.a('number');
            // expect(data.estimated_timespan).to.be(0);
            expect(data.long_term_engagement).to.be.a('boolean');
            // expect(data.long_term_engagement).to.be(false);
            expect(data.reporting_frequency).to.be.a('string');
            // expect(data.reporting_frequency).to.be("");
            expect(data.reporting_level).to.be.a('string');
            // expect(data.reporting_level).to.be("");
            {
              let dataCtr = data.sustainable_development_goals;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.avatar).to.be.a('string');
            // expect(data.avatar).to.be("");
            expect(data.cover_photo).to.be.a('string');
            // expect(data.cover_photo).to.be("");
            expect(data.video).to.be.a('string');
            // expect(data.video).to.be("");
            expect(data.problem).to.be.a('string');
            // expect(data.problem).to.be("");
            expect(data.anticipated_outcome).to.be.a('string');
            // expect(data.anticipated_outcome).to.be("");
            expect(data.who_is_involved).to.be.a('string');
            // expect(data.who_is_involved).to.be("");
            expect(data.local_community_involvement).to.be.a('boolean');
            // expect(data.local_community_involvement).to.be(false);
            expect(data.training_involved).to.be.a('boolean');
            // expect(data.training_involved).to.be(false);
            expect(data.training_type).to.be.a('string');
            // expect(data.training_type).to.be("");
            expect(data.training_amount_people).to.be.a('number');
            // expect(data.training_amount_people).to.be(0);
            expect(data.people_working_in).to.be.a('string');
            // expect(data.people_working_in).to.be("");
            expect(data.people_amount_nearby).to.be.a('number');
            // expect(data.people_amount_nearby).to.be(0);
            expect(data.people_amount_abroad).to.be.a('number');
            // expect(data.people_amount_abroad).to.be(0);
            expect(data.people_amount_employees).to.be.a('number');
            // expect(data.people_amount_employees).to.be(0);
            expect(data.people_amount_volunteers).to.be.a('number');
            // expect(data.people_amount_volunteers).to.be(0);
            expect(data.benefited_people).to.be.a('number');
            // expect(data.benefited_people).to.be(0);
            expect(data.future_maintenance).to.be.a('string');
            // expect(data.future_maintenance).to.be("");
            expect(data.use_of_resources).to.be.a('string');
            // expect(data.use_of_resources).to.be("");
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.completed).to.be.a('boolean');
            // expect(data.completed).to.be(false);
            expect(data.successful).to.be.a('boolean');
            // expect(data.successful).to.be(false);
            expect(data.compatibility_score).to.be.a('number');
            // expect(data.compatibility_score).to.be(0);
            expect(data.price_per_tree).to.be.a('number');
            // expect(data.price_per_tree).to.be(0.0);
            expect(data.visibility).to.be.a('string');
            // expect(data.visibility).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pitchesIDPatch', function() {
        it('should call pitchesIDPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for pitchesIDPatch call and complete the assertions
          /*
          var ID = 56;
          var Body = new WriRestorationMarketplaceApi.PitchUpdate();
          Body.name = "";
          Body.description = "";
          Body.land_types = [""];
          Body.land_ownerships = [""];
          Body.land_size = "";
          Body.land_continent = "";
          Body.land_country = "";
          Body.land_geojson = "";
          Body.restoration_methods = [""];
          Body.restoration_goals = [""];
          Body.funding_sources = [""];
          Body.funding_amount = 0;
          Body.funding_bracket = "";
          Body.revenue_drivers = [""];
          Body.estimated_timespan = 0;
          Body.long_term_engagement = false;
          Body.reporting_frequency = "";
          Body.reporting_level = "";
          Body.sustainable_development_goals = [""];
          Body.cover_photo = 0;
          Body.video = 0;
          Body.problem = "";
          Body.anticipated_outcome = "";
          Body.who_is_involved = "";
          Body.local_community_involvement = false;
          Body.training_involved = false;
          Body.training_type = "";
          Body.training_amount_people = 0;
          Body.people_working_in = "";
          Body.people_amount_nearby = 0;
          Body.people_amount_abroad = 0;
          Body.people_amount_employees = 0;
          Body.people_amount_volunteers = 0;
          Body.benefited_people = 0;
          Body.future_maintenance = "";
          Body.use_of_resources = "";

          instance.pitchesIDPatch(ID, Body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchVersionRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("");
            expect(data.rejected_reason).to.be.a('string');
            // expect(data.rejected_reason).to.be("");
            expect(data.rejected_reason_body).to.be.a('string');
            // expect(data.rejected_reason_body).to.be("");
            expect(data.approved_rejected_by).to.be.a('number');
            // expect(data.approved_rejected_by).to.be(0);
            expect(data.approved_rejected_at).to.be.a(Date);
            // expect(data.approved_rejected_at).to.be(new Date());
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.PitchRead);
                  expect(data.data.id).to.be.a('number');
              // expect(data.data.id).to.be(0);
              expect(data.data.organisation_id).to.be.a('number');
              // expect(data.data.organisation_id).to.be(0);
              expect(data.data.name).to.be.a('string');
              // expect(data.data.name).to.be("");
              expect(data.data.description).to.be.a('string');
              // expect(data.data.description).to.be("");
              {
                let dataCtr = data.data.land_types;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.land_ownerships;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.land_size).to.be.a('string');
              // expect(data.data.land_size).to.be("");
              expect(data.data.land_continent).to.be.a('string');
              // expect(data.data.land_continent).to.be("");
              expect(data.data.land_country).to.be.a('string');
              // expect(data.data.land_country).to.be("");
              expect(data.data.land_geojson).to.be.a('string');
              // expect(data.data.land_geojson).to.be("");
              {
                let dataCtr = data.data.restoration_methods;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.restoration_goals;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.funding_sources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.funding_amount).to.be.a('number');
              // expect(data.data.funding_amount).to.be(0);
              expect(data.data.funding_bracket).to.be.a('string');
              // expect(data.data.funding_bracket).to.be("");
              {
                let dataCtr = data.data.revenue_drivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.estimated_timespan).to.be.a('number');
              // expect(data.data.estimated_timespan).to.be(0);
              expect(data.data.long_term_engagement).to.be.a('boolean');
              // expect(data.data.long_term_engagement).to.be(false);
              expect(data.data.reporting_frequency).to.be.a('string');
              // expect(data.data.reporting_frequency).to.be("");
              expect(data.data.reporting_level).to.be.a('string');
              // expect(data.data.reporting_level).to.be("");
              {
                let dataCtr = data.data.sustainable_development_goals;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.avatar).to.be.a('string');
              // expect(data.data.avatar).to.be("");
              expect(data.data.cover_photo).to.be.a('string');
              // expect(data.data.cover_photo).to.be("");
              expect(data.data.video).to.be.a('string');
              // expect(data.data.video).to.be("");
              expect(data.data.problem).to.be.a('string');
              // expect(data.data.problem).to.be("");
              expect(data.data.anticipated_outcome).to.be.a('string');
              // expect(data.data.anticipated_outcome).to.be("");
              expect(data.data.who_is_involved).to.be.a('string');
              // expect(data.data.who_is_involved).to.be("");
              expect(data.data.local_community_involvement).to.be.a('boolean');
              // expect(data.data.local_community_involvement).to.be(false);
              expect(data.data.training_involved).to.be.a('boolean');
              // expect(data.data.training_involved).to.be(false);
              expect(data.data.training_type).to.be.a('string');
              // expect(data.data.training_type).to.be("");
              expect(data.data.training_amount_people).to.be.a('number');
              // expect(data.data.training_amount_people).to.be(0);
              expect(data.data.people_working_in).to.be.a('string');
              // expect(data.data.people_working_in).to.be("");
              expect(data.data.people_amount_nearby).to.be.a('number');
              // expect(data.data.people_amount_nearby).to.be(0);
              expect(data.data.people_amount_abroad).to.be.a('number');
              // expect(data.data.people_amount_abroad).to.be(0);
              expect(data.data.people_amount_employees).to.be.a('number');
              // expect(data.data.people_amount_employees).to.be(0);
              expect(data.data.people_amount_volunteers).to.be.a('number');
              // expect(data.data.people_amount_volunteers).to.be(0);
              expect(data.data.benefited_people).to.be.a('number');
              // expect(data.data.benefited_people).to.be(0);
              expect(data.data.future_maintenance).to.be.a('string');
              // expect(data.data.future_maintenance).to.be("");
              expect(data.data.use_of_resources).to.be.a('string');
              // expect(data.data.use_of_resources).to.be("");
              expect(data.data.created_at).to.be.a(Date);
              // expect(data.data.created_at).to.be(new Date());
              expect(data.data.updated_at).to.be.a(Date);
              // expect(data.data.updated_at).to.be(new Date());
              expect(data.data.completed).to.be.a('boolean');
              // expect(data.data.completed).to.be(false);
              expect(data.data.successful).to.be.a('boolean');
              // expect(data.data.successful).to.be(false);
              expect(data.data.compatibility_score).to.be.a('number');
              // expect(data.data.compatibility_score).to.be(0);
              expect(data.data.price_per_tree).to.be.a('number');
              // expect(data.data.price_per_tree).to.be(0.0);
              expect(data.data.visibility).to.be.a('string');
              // expect(data.data.visibility).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pitchesIDVisibilityPatch', function() {
        it('should call pitchesIDVisibilityPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for pitchesIDVisibilityPatch call and complete the assertions
          /*
          var ID = 56;
          var Body = new WriRestorationMarketplaceApi.PitchVisibility();
          Body.visibility = "";

          instance.pitchesIDVisibilityPatch(ID, Body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.organisation_id).to.be.a('number');
            // expect(data.organisation_id).to.be(0);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            {
              let dataCtr = data.land_types;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.land_ownerships;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.land_size).to.be.a('string');
            // expect(data.land_size).to.be("");
            expect(data.land_continent).to.be.a('string');
            // expect(data.land_continent).to.be("");
            expect(data.land_country).to.be.a('string');
            // expect(data.land_country).to.be("");
            expect(data.land_geojson).to.be.a('string');
            // expect(data.land_geojson).to.be("");
            {
              let dataCtr = data.restoration_methods;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.restoration_goals;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.funding_sources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.funding_amount).to.be.a('number');
            // expect(data.funding_amount).to.be(0);
            expect(data.funding_bracket).to.be.a('string');
            // expect(data.funding_bracket).to.be("");
            {
              let dataCtr = data.revenue_drivers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.estimated_timespan).to.be.a('number');
            // expect(data.estimated_timespan).to.be(0);
            expect(data.long_term_engagement).to.be.a('boolean');
            // expect(data.long_term_engagement).to.be(false);
            expect(data.reporting_frequency).to.be.a('string');
            // expect(data.reporting_frequency).to.be("");
            expect(data.reporting_level).to.be.a('string');
            // expect(data.reporting_level).to.be("");
            {
              let dataCtr = data.sustainable_development_goals;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.avatar).to.be.a('string');
            // expect(data.avatar).to.be("");
            expect(data.cover_photo).to.be.a('string');
            // expect(data.cover_photo).to.be("");
            expect(data.video).to.be.a('string');
            // expect(data.video).to.be("");
            expect(data.problem).to.be.a('string');
            // expect(data.problem).to.be("");
            expect(data.anticipated_outcome).to.be.a('string');
            // expect(data.anticipated_outcome).to.be("");
            expect(data.who_is_involved).to.be.a('string');
            // expect(data.who_is_involved).to.be("");
            expect(data.local_community_involvement).to.be.a('boolean');
            // expect(data.local_community_involvement).to.be(false);
            expect(data.training_involved).to.be.a('boolean');
            // expect(data.training_involved).to.be(false);
            expect(data.training_type).to.be.a('string');
            // expect(data.training_type).to.be("");
            expect(data.training_amount_people).to.be.a('number');
            // expect(data.training_amount_people).to.be(0);
            expect(data.people_working_in).to.be.a('string');
            // expect(data.people_working_in).to.be("");
            expect(data.people_amount_nearby).to.be.a('number');
            // expect(data.people_amount_nearby).to.be(0);
            expect(data.people_amount_abroad).to.be.a('number');
            // expect(data.people_amount_abroad).to.be(0);
            expect(data.people_amount_employees).to.be.a('number');
            // expect(data.people_amount_employees).to.be(0);
            expect(data.people_amount_volunteers).to.be.a('number');
            // expect(data.people_amount_volunteers).to.be(0);
            expect(data.benefited_people).to.be.a('number');
            // expect(data.benefited_people).to.be(0);
            expect(data.future_maintenance).to.be.a('string');
            // expect(data.future_maintenance).to.be("");
            expect(data.use_of_resources).to.be.a('string');
            // expect(data.use_of_resources).to.be("");
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.completed).to.be.a('boolean');
            // expect(data.completed).to.be(false);
            expect(data.successful).to.be.a('boolean');
            // expect(data.successful).to.be(false);
            expect(data.compatibility_score).to.be.a('number');
            // expect(data.compatibility_score).to.be(0);
            expect(data.price_per_tree).to.be.a('number');
            // expect(data.price_per_tree).to.be(0.0);
            expect(data.visibility).to.be.a('string');
            // expect(data.visibility).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pitchesMostRecentGet', function() {
        it('should call pitchesMostRecentGet successfully', function(done) {
          // TODO: uncomment, update parameter values for pitchesMostRecentGet call and complete the assertions
          /*
          var opts = {};
          opts.limit = 56;

          instance.pitchesMostRecentGet(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pitchesPost', function() {
        it('should call pitchesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for pitchesPost call and complete the assertions
          /*
          var Body = new WriRestorationMarketplaceApi.PitchCreate();
          Body.name = "";
          Body.description = "";
          Body.land_types = [""];
          Body.land_ownerships = [""];
          Body.land_size = "";
          Body.land_continent = "";
          Body.land_country = "";
          Body.land_geojson = "";
          Body.restoration_methods = [""];
          Body.restoration_goals = [""];
          Body.funding_sources = [""];
          Body.funding_amount = 0;
          Body.funding_bracket = "";
          Body.revenue_drivers = [""];
          Body.estimated_timespan = 0;
          Body.long_term_engagement = false;
          Body.reporting_frequency = "";
          Body.reporting_level = "";
          Body.sustainable_development_goals = [""];
          Body.cover_photo = 0;
          Body.video = 0;
          Body.problem = "";
          Body.anticipated_outcome = "";
          Body.who_is_involved = "";
          Body.local_community_involvement = false;
          Body.training_involved = false;
          Body.training_type = "";
          Body.training_amount_people = 0;
          Body.people_working_in = "";
          Body.people_amount_nearby = 0;
          Body.people_amount_abroad = 0;
          Body.people_amount_employees = 0;
          Body.people_amount_volunteers = 0;
          Body.benefited_people = 0;
          Body.future_maintenance = "";
          Body.use_of_resources = "";

          instance.pitchesPost(Body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchVersionRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("");
            expect(data.rejected_reason).to.be.a('string');
            // expect(data.rejected_reason).to.be("");
            expect(data.rejected_reason_body).to.be.a('string');
            // expect(data.rejected_reason_body).to.be("");
            expect(data.approved_rejected_by).to.be.a('number');
            // expect(data.approved_rejected_by).to.be(0);
            expect(data.approved_rejected_at).to.be.a(Date);
            // expect(data.approved_rejected_at).to.be(new Date());
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.PitchRead);
                  expect(data.data.id).to.be.a('number');
              // expect(data.data.id).to.be(0);
              expect(data.data.organisation_id).to.be.a('number');
              // expect(data.data.organisation_id).to.be(0);
              expect(data.data.name).to.be.a('string');
              // expect(data.data.name).to.be("");
              expect(data.data.description).to.be.a('string');
              // expect(data.data.description).to.be("");
              {
                let dataCtr = data.data.land_types;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.land_ownerships;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.land_size).to.be.a('string');
              // expect(data.data.land_size).to.be("");
              expect(data.data.land_continent).to.be.a('string');
              // expect(data.data.land_continent).to.be("");
              expect(data.data.land_country).to.be.a('string');
              // expect(data.data.land_country).to.be("");
              expect(data.data.land_geojson).to.be.a('string');
              // expect(data.data.land_geojson).to.be("");
              {
                let dataCtr = data.data.restoration_methods;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.restoration_goals;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.funding_sources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.funding_amount).to.be.a('number');
              // expect(data.data.funding_amount).to.be(0);
              expect(data.data.funding_bracket).to.be.a('string');
              // expect(data.data.funding_bracket).to.be("");
              {
                let dataCtr = data.data.revenue_drivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.estimated_timespan).to.be.a('number');
              // expect(data.data.estimated_timespan).to.be(0);
              expect(data.data.long_term_engagement).to.be.a('boolean');
              // expect(data.data.long_term_engagement).to.be(false);
              expect(data.data.reporting_frequency).to.be.a('string');
              // expect(data.data.reporting_frequency).to.be("");
              expect(data.data.reporting_level).to.be.a('string');
              // expect(data.data.reporting_level).to.be("");
              {
                let dataCtr = data.data.sustainable_development_goals;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  // expect(data).to.be("");
                }
              }
              expect(data.data.avatar).to.be.a('string');
              // expect(data.data.avatar).to.be("");
              expect(data.data.cover_photo).to.be.a('string');
              // expect(data.data.cover_photo).to.be("");
              expect(data.data.video).to.be.a('string');
              // expect(data.data.video).to.be("");
              expect(data.data.problem).to.be.a('string');
              // expect(data.data.problem).to.be("");
              expect(data.data.anticipated_outcome).to.be.a('string');
              // expect(data.data.anticipated_outcome).to.be("");
              expect(data.data.who_is_involved).to.be.a('string');
              // expect(data.data.who_is_involved).to.be("");
              expect(data.data.local_community_involvement).to.be.a('boolean');
              // expect(data.data.local_community_involvement).to.be(false);
              expect(data.data.training_involved).to.be.a('boolean');
              // expect(data.data.training_involved).to.be(false);
              expect(data.data.training_type).to.be.a('string');
              // expect(data.data.training_type).to.be("");
              expect(data.data.training_amount_people).to.be.a('number');
              // expect(data.data.training_amount_people).to.be(0);
              expect(data.data.people_working_in).to.be.a('string');
              // expect(data.data.people_working_in).to.be("");
              expect(data.data.people_amount_nearby).to.be.a('number');
              // expect(data.data.people_amount_nearby).to.be(0);
              expect(data.data.people_amount_abroad).to.be.a('number');
              // expect(data.data.people_amount_abroad).to.be(0);
              expect(data.data.people_amount_employees).to.be.a('number');
              // expect(data.data.people_amount_employees).to.be(0);
              expect(data.data.people_amount_volunteers).to.be.a('number');
              // expect(data.data.people_amount_volunteers).to.be(0);
              expect(data.data.benefited_people).to.be.a('number');
              // expect(data.data.benefited_people).to.be(0);
              expect(data.data.future_maintenance).to.be.a('string');
              // expect(data.data.future_maintenance).to.be("");
              expect(data.data.use_of_resources).to.be.a('string');
              // expect(data.data.use_of_resources).to.be("");
              expect(data.data.created_at).to.be.a(Date);
              // expect(data.data.created_at).to.be(new Date());
              expect(data.data.updated_at).to.be.a(Date);
              // expect(data.data.updated_at).to.be(new Date());
              expect(data.data.completed).to.be.a('boolean');
              // expect(data.data.completed).to.be(false);
              expect(data.data.successful).to.be.a('boolean');
              // expect(data.data.successful).to.be(false);
              expect(data.data.compatibility_score).to.be.a('number');
              // expect(data.data.compatibility_score).to.be(0);
              expect(data.data.price_per_tree).to.be.a('number');
              // expect(data.data.price_per_tree).to.be(0.0);
              expect(data.data.visibility).to.be.a('string');
              // expect(data.data.visibility).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pitchesSearchPost', function() {
        it('should call pitchesSearchPost successfully', function(done) {
          // TODO: uncomment, update parameter values for pitchesSearchPost call and complete the assertions
          /*
          var Body = new WriRestorationMarketplaceApi.FilterSearch();
          Body.page = 0;
          Body.sortAttribute = "created_at";
          Body.sortDirection = "asc";
          Body.filters = [new WriRestorationMarketplaceApi.FilterCondition()];
          Body.filters[0].attribute = "land_types";
          Body.filters[0].operator = "contains";
          Body.filters[0].value = [""];

          instance.pitchesSearchPost(Body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.PitchReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
