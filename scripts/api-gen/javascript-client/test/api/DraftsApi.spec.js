/*
 * WRI Restoration Marketplace API
 * ### About  This API serves the web and mobile apps for WRI's Restoration Marketplace (AKA TerraMatch).  ### Authentication & Authorisation  JWTs are used for authentication. Upon successful log in a JWT will be provided for you. These expire after 12 hours.  A padlock icon next to an endpoint indicates that it requires an authenticated user. For example:  ![](/images/padlock.png)  ### Requests & Responses  The response bodies documented here will be wrapped in an object adhering to the JSON:API specification.  ### Error Codes  Any errors returned in the body of a response will have a unique code to help identify the type of error. They are:  ``` ACCEPTED, ACTIVE_URL, AFTER, AFTER_OR_EQUAL, ALPHA, ALPHA_DASH, ALPHA_NUM, ARRAY, BEFORE, BEFORE_OR_EQUAL, BETWEEN, BOOLEAN, CARBON_CERTIFICATION_TYPE, CONFIRMED, CONTAIN_LOWER, CONTAIN_NUMBER, CONTAIN_UPPER, CONTINENT, COUNTRY_CODE, CUSTOM, DATE, DATE_EQUALS, DATE_FORMAT, DIFFERENT, DIGITS, DIGITS_BETWEEN, DIMENSIONS, DISTINCT, DOCUMENT_TYPE, EMAIL, ENDS_WITH, EXISTS, FILE, FILLED, FUNDING_BRACKET, FUNDING_SOURCE, GT, GTE, IMAGE, IN, IN_ARRAY, INTEGER, IP, IPV4, IPV6, JSON, LAND_OWNERSHIP, LAND_SIZE, LAND_TYPE, LT, LTE, MAX, MIMES, MIMETYPES, MIN, NOT_IN, NOT_PRESENT, NOT_REGEX, NUMERIC, OTHER_VALUE_PRESENT, OTHER_VALUE_NULL, OTHER_VALUE_STRING, ORGANISATION_CATEGORY, ORGANISATION_TYPE, PRESENT, REGEX, REJECTED_REASON, REPORTING_FREQUENCY, REPORTING_LEVEL, REQUIRED, REQUIRED_IF, REQUIRED_UNLESS, REQUIRED_WITH, REQUIRED_WITH_ALL, REQUIRED_WITHOUT, REQUIRED_WITHOUT_ALL, RESTORATION_GOAL, RESTORATION_METHOD, REVENUE_DRIVER, SAME, SIZE, SOFT_URL, STARTS_WITH, STARTS_WITH_FACEBOOK, STARTS_WITH_TWITTER, STARTS_WITH_INSTAGRAM, STARTS_WITH_LINKEDIN, STRICT_FLOAT, STRING, SUSTAINABLE_DEVELOPMENT_GOAL, TIMEZONE, TREE_SPECIES_OWNER, UNIQUE, UPLOADED, URL, UUID, VISIBILITY ```  ### Uploads  Uploads should first be uploaded to the `/uploads` endpoint. Upon success an ID will be returned, this ID is valid for 1 day. Use this ID in your request body to bind the upload to a property.  ### Elevator Videos  Elevator videos can be created by using the `/elevator_videos` endpoint. After creating an elevator video you will be returned an elevator video ID. Use this to check its status. Elevator videos will start off as `processing` and change to `finished` when it has been build. Once the elevator video is built the `upload_id` property will be present, you can use this just like a regular upload and attach it to a pitch's `video` property. Be sure to use the elevator video's `upload_id` property and not its `id` property. An elevator video's status may end up as `errored` or `timed_out` in which case something has gone wrong.  ### Entity Relationship Diagram  ![](/images/erd.png)  ### Units  * All prices are measured in USD * All land is measured in hectares * All time is measured in months  ### Drafts  When creating a draft the `data` property be equal to a string of JSON containing an empty object. You can then manipulate the `data` property with subsequent updates. When updating a draft you will need to use [JSON Patch](http://jsonpatch.com/) requests to manipulate the `data` property. Operations are relative to the `data` property which means you don't need to preface paths with `/data`. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WriRestorationMarketplaceApi);
  }
}(this, function(expect, WriRestorationMarketplaceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WriRestorationMarketplaceApi.DraftsApi();
  });

  describe('(package)', function() {
    describe('DraftsApi', function() {
      describe('draftsIDDelete', function() {
        it('should call draftsIDDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDDelete call and complete the assertions
          /*
          var ID = 56;

          instance.draftsIDDelete(ID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.Empty);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsIDGet', function() {
        it('should call draftsIDGet successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDGet call and complete the assertions
          /*
          var ID = 56;

          instance.draftsIDGet(ID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("");
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.DraftDataRead);
                  expect(data.data.offer).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOffer);
                    expect(data.data.offer.name).to.be.a('string');
                // expect(data.data.offer.name).to.be("");
                expect(data.data.offer.description).to.be.a('string');
                // expect(data.data.offer.description).to.be("");
                {
                  let dataCtr = data.data.offer.land_types;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.land_ownerships;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.land_size).to.be.a('string');
                // expect(data.data.offer.land_size).to.be("");
                expect(data.data.offer.land_continent).to.be.a('string');
                // expect(data.data.offer.land_continent).to.be("");
                expect(data.data.offer.land_country).to.be.a('string');
                // expect(data.data.offer.land_country).to.be("");
                {
                  let dataCtr = data.data.offer.restoration_methods;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.restoration_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.funding_sources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.funding_amount).to.be.a('number');
                // expect(data.data.offer.funding_amount).to.be(0);
                expect(data.data.offer.funding_bracket).to.be.a('string');
                // expect(data.data.offer.funding_bracket).to.be("");
                expect(data.data.offer.price_per_tree).to.be.a('number');
                // expect(data.data.offer.price_per_tree).to.be(0.0);
                expect(data.data.offer.long_term_engagement).to.be.a('boolean');
                // expect(data.data.offer.long_term_engagement).to.be(false);
                expect(data.data.offer.reporting_frequency).to.be.a('string');
                // expect(data.data.offer.reporting_frequency).to.be("");
                expect(data.data.offer.reporting_level).to.be.a('string');
                // expect(data.data.offer.reporting_level).to.be("");
                {
                  let dataCtr = data.data.offer.sustainable_development_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.cover_photo).to.be.a('string');
                // expect(data.data.offer.cover_photo).to.be("");
                expect(data.data.offer.video).to.be.a('string');
                // expect(data.data.offer.video).to.be("");
              {
                let dataCtr = data.data.offer_contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferContacts);
                  expect(data.user_id).to.be.a('number');
                  // expect(data.user_id).to.be(0);
                  expect(data.team_member_id).to.be.a('number');
                  // expect(data.team_member_id).to.be(0);
                }
              }
              {
                let dataCtr = data.data.offer_documents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferDocuments);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.document).to.be.a('string');
                  // expect(data.document).to.be("");
                }
              }
              expect(data.data.pitch).to.be.a(WriRestorationMarketplaceApi.DraftDataReadPitch);
                    expect(data.data.pitch.name).to.be.a('string');
                // expect(data.data.pitch.name).to.be("");
                expect(data.data.pitch.description).to.be.a('string');
                // expect(data.data.pitch.description).to.be("");
                {
                  let dataCtr = data.data.pitch.land_types;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.land_ownerships;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.land_size).to.be.a('string');
                // expect(data.data.pitch.land_size).to.be("");
                expect(data.data.pitch.land_continent).to.be.a('string');
                // expect(data.data.pitch.land_continent).to.be("");
                expect(data.data.pitch.land_country).to.be.a('string');
                // expect(data.data.pitch.land_country).to.be("");
                expect(data.data.pitch.land_geojson).to.be.a('string');
                // expect(data.data.pitch.land_geojson).to.be("");
                {
                  let dataCtr = data.data.pitch.restoration_methods;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.restoration_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.funding_sources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.funding_amount).to.be.a('number');
                // expect(data.data.pitch.funding_amount).to.be(0);
                expect(data.data.pitch.funding_bracket).to.be.a('string');
                // expect(data.data.pitch.funding_bracket).to.be("");
                {
                  let dataCtr = data.data.pitch.revenue_drivers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.estimated_timespan).to.be.a('number');
                // expect(data.data.pitch.estimated_timespan).to.be(0);
                expect(data.data.pitch.long_term_engagement).to.be.a('boolean');
                // expect(data.data.pitch.long_term_engagement).to.be(false);
                expect(data.data.pitch.reporting_frequency).to.be.a('string');
                // expect(data.data.pitch.reporting_frequency).to.be("");
                expect(data.data.pitch.reporting_level).to.be.a('string');
                // expect(data.data.pitch.reporting_level).to.be("");
                {
                  let dataCtr = data.data.pitch.sustainable_development_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.cover_photo).to.be.a('string');
                // expect(data.data.pitch.cover_photo).to.be("");
                expect(data.data.pitch.video).to.be.a('string');
                // expect(data.data.pitch.video).to.be("");
                expect(data.data.pitch.problem).to.be.a('string');
                // expect(data.data.pitch.problem).to.be("");
                expect(data.data.pitch.anticipated_outcome).to.be.a('string');
                // expect(data.data.pitch.anticipated_outcome).to.be("");
                expect(data.data.pitch.who_is_involved).to.be.a('string');
                // expect(data.data.pitch.who_is_involved).to.be("");
                expect(data.data.pitch.local_community_involvement).to.be.a('boolean');
                // expect(data.data.pitch.local_community_involvement).to.be(false);
                expect(data.data.pitch.training_involved).to.be.a('boolean');
                // expect(data.data.pitch.training_involved).to.be(false);
                expect(data.data.pitch.training_type).to.be.a('string');
                // expect(data.data.pitch.training_type).to.be("");
                expect(data.data.pitch.training_amount_people).to.be.a('number');
                // expect(data.data.pitch.training_amount_people).to.be(0);
                expect(data.data.pitch.people_working_in).to.be.a('string');
                // expect(data.data.pitch.people_working_in).to.be("");
                expect(data.data.pitch.people_amount_nearby).to.be.a('number');
                // expect(data.data.pitch.people_amount_nearby).to.be(0);
                expect(data.data.pitch.people_amount_abroad).to.be.a('number');
                // expect(data.data.pitch.people_amount_abroad).to.be(0);
                expect(data.data.pitch.people_amount_employees).to.be.a('number');
                // expect(data.data.pitch.people_amount_employees).to.be(0);
                expect(data.data.pitch.people_amount_volunteers).to.be.a('number');
                // expect(data.data.pitch.people_amount_volunteers).to.be(0);
                expect(data.data.pitch.benefited_people).to.be.a('number');
                // expect(data.data.pitch.benefited_people).to.be(0);
                expect(data.data.pitch.future_maintenance).to.be.a('string');
                // expect(data.data.pitch.future_maintenance).to.be("");
                expect(data.data.pitch.use_of_resources).to.be.a('string');
                // expect(data.data.pitch.use_of_resources).to.be("");
              {
                let dataCtr = data.data.pitch_contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferContacts);
                  expect(data.user_id).to.be.a('number');
                  // expect(data.user_id).to.be(0);
                  expect(data.team_member_id).to.be.a('number');
                  // expect(data.team_member_id).to.be(0);
                }
              }
              {
                let dataCtr = data.data.pitch_documents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferDocuments);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.document).to.be.a('string');
                  // expect(data.document).to.be("");
                }
              }
              {
                let dataCtr = data.data.carbon_certifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadCarbonCertifications);
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.other_value).to.be.a('string');
                  // expect(data.other_value).to.be("");
                  expect(data.link).to.be.a('string');
                  // expect(data.link).to.be("");
                }
              }
              {
                let dataCtr = data.data.restoration_method_metrics;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadRestorationMethodMetrics);
                  expect(data.restoration_method).to.be.a('string');
                  // expect(data.restoration_method).to.be("");
                  expect(data.experience).to.be.a('number');
                  // expect(data.experience).to.be(0);
                  expect(data.land_size).to.be.a('number');
                  // expect(data.land_size).to.be(0.0);
                  expect(data.price_per_hectare).to.be.a('number');
                  // expect(data.price_per_hectare).to.be(0.0);
                  expect(data.biomass_per_hectare).to.be.a('number');
                  // expect(data.biomass_per_hectare).to.be(0.0);
                  expect(data.carbon_impact).to.be.a('number');
                  // expect(data.carbon_impact).to.be(0.0);
                  {
                    let dataCtr = data.species_impacted;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      // expect(data).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.data.tree_species;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadTreeSpecies);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.is_native).to.be.a('boolean');
                  // expect(data.is_native).to.be(false);
                  expect(data.count).to.be.a('number');
                  // expect(data.count).to.be(0);
                  expect(data.price_to_plant).to.be.a('number');
                  // expect(data.price_to_plant).to.be(0.0);
                  expect(data.price_to_maintain).to.be.a('number');
                  // expect(data.price_to_maintain).to.be(0.0);
                  expect(data.saplings).to.be.a('number');
                  // expect(data.saplings).to.be(0.0);
                  expect(data.site_prep).to.be.a('number');
                  // expect(data.site_prep).to.be(0.0);
                  expect(data.survival_rate).to.be.a('number');
                  // expect(data.survival_rate).to.be(0);
                  expect(data.produces_food).to.be.a('boolean');
                  // expect(data.produces_food).to.be(false);
                  expect(data.produces_firewood).to.be.a('boolean');
                  // expect(data.produces_firewood).to.be(false);
                  expect(data.produces_timber).to.be.a('boolean');
                  // expect(data.produces_timber).to.be(false);
                  expect(data.owner).to.be.a('string');
                  // expect(data.owner).to.be("");
                  expect(data.season).to.be.a('string');
                  // expect(data.season).to.be("");
                }
              }
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.created_by).to.be.a('number');
            // expect(data.created_by).to.be(0);
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.updated_by).to.be.a('number');
            // expect(data.updated_by).to.be(0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsIDPatch', function() {
        it('should call draftsIDPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDPatch call and complete the assertions
          /*
          var ID = 56;
          var Body = new WriRestorationMarketplaceApi.DraftUpdate();

          instance.draftsIDPatch(ID, Body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("");
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.DraftDataRead);
                  expect(data.data.offer).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOffer);
                    expect(data.data.offer.name).to.be.a('string');
                // expect(data.data.offer.name).to.be("");
                expect(data.data.offer.description).to.be.a('string');
                // expect(data.data.offer.description).to.be("");
                {
                  let dataCtr = data.data.offer.land_types;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.land_ownerships;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.land_size).to.be.a('string');
                // expect(data.data.offer.land_size).to.be("");
                expect(data.data.offer.land_continent).to.be.a('string');
                // expect(data.data.offer.land_continent).to.be("");
                expect(data.data.offer.land_country).to.be.a('string');
                // expect(data.data.offer.land_country).to.be("");
                {
                  let dataCtr = data.data.offer.restoration_methods;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.restoration_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.funding_sources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.funding_amount).to.be.a('number');
                // expect(data.data.offer.funding_amount).to.be(0);
                expect(data.data.offer.funding_bracket).to.be.a('string');
                // expect(data.data.offer.funding_bracket).to.be("");
                expect(data.data.offer.price_per_tree).to.be.a('number');
                // expect(data.data.offer.price_per_tree).to.be(0.0);
                expect(data.data.offer.long_term_engagement).to.be.a('boolean');
                // expect(data.data.offer.long_term_engagement).to.be(false);
                expect(data.data.offer.reporting_frequency).to.be.a('string');
                // expect(data.data.offer.reporting_frequency).to.be("");
                expect(data.data.offer.reporting_level).to.be.a('string');
                // expect(data.data.offer.reporting_level).to.be("");
                {
                  let dataCtr = data.data.offer.sustainable_development_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.cover_photo).to.be.a('string');
                // expect(data.data.offer.cover_photo).to.be("");
                expect(data.data.offer.video).to.be.a('string');
                // expect(data.data.offer.video).to.be("");
              {
                let dataCtr = data.data.offer_contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferContacts);
                  expect(data.user_id).to.be.a('number');
                  // expect(data.user_id).to.be(0);
                  expect(data.team_member_id).to.be.a('number');
                  // expect(data.team_member_id).to.be(0);
                }
              }
              {
                let dataCtr = data.data.offer_documents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferDocuments);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.document).to.be.a('string');
                  // expect(data.document).to.be("");
                }
              }
              expect(data.data.pitch).to.be.a(WriRestorationMarketplaceApi.DraftDataReadPitch);
                    expect(data.data.pitch.name).to.be.a('string');
                // expect(data.data.pitch.name).to.be("");
                expect(data.data.pitch.description).to.be.a('string');
                // expect(data.data.pitch.description).to.be("");
                {
                  let dataCtr = data.data.pitch.land_types;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.land_ownerships;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.land_size).to.be.a('string');
                // expect(data.data.pitch.land_size).to.be("");
                expect(data.data.pitch.land_continent).to.be.a('string');
                // expect(data.data.pitch.land_continent).to.be("");
                expect(data.data.pitch.land_country).to.be.a('string');
                // expect(data.data.pitch.land_country).to.be("");
                expect(data.data.pitch.land_geojson).to.be.a('string');
                // expect(data.data.pitch.land_geojson).to.be("");
                {
                  let dataCtr = data.data.pitch.restoration_methods;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.restoration_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.funding_sources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.funding_amount).to.be.a('number');
                // expect(data.data.pitch.funding_amount).to.be(0);
                expect(data.data.pitch.funding_bracket).to.be.a('string');
                // expect(data.data.pitch.funding_bracket).to.be("");
                {
                  let dataCtr = data.data.pitch.revenue_drivers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.estimated_timespan).to.be.a('number');
                // expect(data.data.pitch.estimated_timespan).to.be(0);
                expect(data.data.pitch.long_term_engagement).to.be.a('boolean');
                // expect(data.data.pitch.long_term_engagement).to.be(false);
                expect(data.data.pitch.reporting_frequency).to.be.a('string');
                // expect(data.data.pitch.reporting_frequency).to.be("");
                expect(data.data.pitch.reporting_level).to.be.a('string');
                // expect(data.data.pitch.reporting_level).to.be("");
                {
                  let dataCtr = data.data.pitch.sustainable_development_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.cover_photo).to.be.a('string');
                // expect(data.data.pitch.cover_photo).to.be("");
                expect(data.data.pitch.video).to.be.a('string');
                // expect(data.data.pitch.video).to.be("");
                expect(data.data.pitch.problem).to.be.a('string');
                // expect(data.data.pitch.problem).to.be("");
                expect(data.data.pitch.anticipated_outcome).to.be.a('string');
                // expect(data.data.pitch.anticipated_outcome).to.be("");
                expect(data.data.pitch.who_is_involved).to.be.a('string');
                // expect(data.data.pitch.who_is_involved).to.be("");
                expect(data.data.pitch.local_community_involvement).to.be.a('boolean');
                // expect(data.data.pitch.local_community_involvement).to.be(false);
                expect(data.data.pitch.training_involved).to.be.a('boolean');
                // expect(data.data.pitch.training_involved).to.be(false);
                expect(data.data.pitch.training_type).to.be.a('string');
                // expect(data.data.pitch.training_type).to.be("");
                expect(data.data.pitch.training_amount_people).to.be.a('number');
                // expect(data.data.pitch.training_amount_people).to.be(0);
                expect(data.data.pitch.people_working_in).to.be.a('string');
                // expect(data.data.pitch.people_working_in).to.be("");
                expect(data.data.pitch.people_amount_nearby).to.be.a('number');
                // expect(data.data.pitch.people_amount_nearby).to.be(0);
                expect(data.data.pitch.people_amount_abroad).to.be.a('number');
                // expect(data.data.pitch.people_amount_abroad).to.be(0);
                expect(data.data.pitch.people_amount_employees).to.be.a('number');
                // expect(data.data.pitch.people_amount_employees).to.be(0);
                expect(data.data.pitch.people_amount_volunteers).to.be.a('number');
                // expect(data.data.pitch.people_amount_volunteers).to.be(0);
                expect(data.data.pitch.benefited_people).to.be.a('number');
                // expect(data.data.pitch.benefited_people).to.be(0);
                expect(data.data.pitch.future_maintenance).to.be.a('string');
                // expect(data.data.pitch.future_maintenance).to.be("");
                expect(data.data.pitch.use_of_resources).to.be.a('string');
                // expect(data.data.pitch.use_of_resources).to.be("");
              {
                let dataCtr = data.data.pitch_contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferContacts);
                  expect(data.user_id).to.be.a('number');
                  // expect(data.user_id).to.be(0);
                  expect(data.team_member_id).to.be.a('number');
                  // expect(data.team_member_id).to.be(0);
                }
              }
              {
                let dataCtr = data.data.pitch_documents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferDocuments);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.document).to.be.a('string');
                  // expect(data.document).to.be("");
                }
              }
              {
                let dataCtr = data.data.carbon_certifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadCarbonCertifications);
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.other_value).to.be.a('string');
                  // expect(data.other_value).to.be("");
                  expect(data.link).to.be.a('string');
                  // expect(data.link).to.be("");
                }
              }
              {
                let dataCtr = data.data.restoration_method_metrics;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadRestorationMethodMetrics);
                  expect(data.restoration_method).to.be.a('string');
                  // expect(data.restoration_method).to.be("");
                  expect(data.experience).to.be.a('number');
                  // expect(data.experience).to.be(0);
                  expect(data.land_size).to.be.a('number');
                  // expect(data.land_size).to.be(0.0);
                  expect(data.price_per_hectare).to.be.a('number');
                  // expect(data.price_per_hectare).to.be(0.0);
                  expect(data.biomass_per_hectare).to.be.a('number');
                  // expect(data.biomass_per_hectare).to.be(0.0);
                  expect(data.carbon_impact).to.be.a('number');
                  // expect(data.carbon_impact).to.be(0.0);
                  {
                    let dataCtr = data.species_impacted;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      // expect(data).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.data.tree_species;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadTreeSpecies);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.is_native).to.be.a('boolean');
                  // expect(data.is_native).to.be(false);
                  expect(data.count).to.be.a('number');
                  // expect(data.count).to.be(0);
                  expect(data.price_to_plant).to.be.a('number');
                  // expect(data.price_to_plant).to.be(0.0);
                  expect(data.price_to_maintain).to.be.a('number');
                  // expect(data.price_to_maintain).to.be(0.0);
                  expect(data.saplings).to.be.a('number');
                  // expect(data.saplings).to.be(0.0);
                  expect(data.site_prep).to.be.a('number');
                  // expect(data.site_prep).to.be(0.0);
                  expect(data.survival_rate).to.be.a('number');
                  // expect(data.survival_rate).to.be(0);
                  expect(data.produces_food).to.be.a('boolean');
                  // expect(data.produces_food).to.be(false);
                  expect(data.produces_firewood).to.be.a('boolean');
                  // expect(data.produces_firewood).to.be(false);
                  expect(data.produces_timber).to.be.a('boolean');
                  // expect(data.produces_timber).to.be(false);
                  expect(data.owner).to.be.a('string');
                  // expect(data.owner).to.be("");
                  expect(data.season).to.be.a('string');
                  // expect(data.season).to.be("");
                }
              }
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.created_by).to.be.a('number');
            // expect(data.created_by).to.be(0);
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.updated_by).to.be.a('number');
            // expect(data.updated_by).to.be(0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsIDPublishPatch', function() {
        it('should call draftsIDPublishPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDPublishPatch call and complete the assertions
          /*
          var ID = 56;

          instance.draftsIDPublishPatch(ID).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.InlineResponse201);
            expect(data.offer_id).to.be.a('number');
            // expect(data.offer_id).to.be(0);
            expect(data.pitch_id).to.be.a('number');
            // expect(data.pitch_id).to.be(0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsOffersGet', function() {
        it('should call draftsOffersGet successfully', function(done) {
          // TODO: uncomment draftsOffersGet call and complete the assertions
          /*

          instance.draftsOffersGet().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsPitchesGet', function() {
        it('should call draftsPitchesGet successfully', function(done) {
          // TODO: uncomment draftsPitchesGet call and complete the assertions
          /*

          instance.draftsPitchesGet().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftReadAll);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsPost', function() {
        it('should call draftsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsPost call and complete the assertions
          /*
          var Body = new WriRestorationMarketplaceApi.DraftCreate();
          Body.name = "";
          Body.type = "";

          instance.draftsPost(Body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftRead);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.type).to.be.a('string');
            // expect(data.type).to.be("");
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.DraftDataRead);
                  expect(data.data.offer).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOffer);
                    expect(data.data.offer.name).to.be.a('string');
                // expect(data.data.offer.name).to.be("");
                expect(data.data.offer.description).to.be.a('string');
                // expect(data.data.offer.description).to.be("");
                {
                  let dataCtr = data.data.offer.land_types;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.land_ownerships;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.land_size).to.be.a('string');
                // expect(data.data.offer.land_size).to.be("");
                expect(data.data.offer.land_continent).to.be.a('string');
                // expect(data.data.offer.land_continent).to.be("");
                expect(data.data.offer.land_country).to.be.a('string');
                // expect(data.data.offer.land_country).to.be("");
                {
                  let dataCtr = data.data.offer.restoration_methods;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.restoration_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.offer.funding_sources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.funding_amount).to.be.a('number');
                // expect(data.data.offer.funding_amount).to.be(0);
                expect(data.data.offer.funding_bracket).to.be.a('string');
                // expect(data.data.offer.funding_bracket).to.be("");
                expect(data.data.offer.price_per_tree).to.be.a('number');
                // expect(data.data.offer.price_per_tree).to.be(0.0);
                expect(data.data.offer.long_term_engagement).to.be.a('boolean');
                // expect(data.data.offer.long_term_engagement).to.be(false);
                expect(data.data.offer.reporting_frequency).to.be.a('string');
                // expect(data.data.offer.reporting_frequency).to.be("");
                expect(data.data.offer.reporting_level).to.be.a('string');
                // expect(data.data.offer.reporting_level).to.be("");
                {
                  let dataCtr = data.data.offer.sustainable_development_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.offer.cover_photo).to.be.a('string');
                // expect(data.data.offer.cover_photo).to.be("");
                expect(data.data.offer.video).to.be.a('string');
                // expect(data.data.offer.video).to.be("");
              {
                let dataCtr = data.data.offer_contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferContacts);
                  expect(data.user_id).to.be.a('number');
                  // expect(data.user_id).to.be(0);
                  expect(data.team_member_id).to.be.a('number');
                  // expect(data.team_member_id).to.be(0);
                }
              }
              {
                let dataCtr = data.data.offer_documents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferDocuments);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.document).to.be.a('string');
                  // expect(data.document).to.be("");
                }
              }
              expect(data.data.pitch).to.be.a(WriRestorationMarketplaceApi.DraftDataReadPitch);
                    expect(data.data.pitch.name).to.be.a('string');
                // expect(data.data.pitch.name).to.be("");
                expect(data.data.pitch.description).to.be.a('string');
                // expect(data.data.pitch.description).to.be("");
                {
                  let dataCtr = data.data.pitch.land_types;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.land_ownerships;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.land_size).to.be.a('string');
                // expect(data.data.pitch.land_size).to.be("");
                expect(data.data.pitch.land_continent).to.be.a('string');
                // expect(data.data.pitch.land_continent).to.be("");
                expect(data.data.pitch.land_country).to.be.a('string');
                // expect(data.data.pitch.land_country).to.be("");
                expect(data.data.pitch.land_geojson).to.be.a('string');
                // expect(data.data.pitch.land_geojson).to.be("");
                {
                  let dataCtr = data.data.pitch.restoration_methods;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.restoration_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.pitch.funding_sources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.funding_amount).to.be.a('number');
                // expect(data.data.pitch.funding_amount).to.be(0);
                expect(data.data.pitch.funding_bracket).to.be.a('string');
                // expect(data.data.pitch.funding_bracket).to.be("");
                {
                  let dataCtr = data.data.pitch.revenue_drivers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.estimated_timespan).to.be.a('number');
                // expect(data.data.pitch.estimated_timespan).to.be(0);
                expect(data.data.pitch.long_term_engagement).to.be.a('boolean');
                // expect(data.data.pitch.long_term_engagement).to.be(false);
                expect(data.data.pitch.reporting_frequency).to.be.a('string');
                // expect(data.data.pitch.reporting_frequency).to.be("");
                expect(data.data.pitch.reporting_level).to.be.a('string');
                // expect(data.data.pitch.reporting_level).to.be("");
                {
                  let dataCtr = data.data.pitch.sustainable_development_goals;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.data.pitch.cover_photo).to.be.a('string');
                // expect(data.data.pitch.cover_photo).to.be("");
                expect(data.data.pitch.video).to.be.a('string');
                // expect(data.data.pitch.video).to.be("");
                expect(data.data.pitch.problem).to.be.a('string');
                // expect(data.data.pitch.problem).to.be("");
                expect(data.data.pitch.anticipated_outcome).to.be.a('string');
                // expect(data.data.pitch.anticipated_outcome).to.be("");
                expect(data.data.pitch.who_is_involved).to.be.a('string');
                // expect(data.data.pitch.who_is_involved).to.be("");
                expect(data.data.pitch.local_community_involvement).to.be.a('boolean');
                // expect(data.data.pitch.local_community_involvement).to.be(false);
                expect(data.data.pitch.training_involved).to.be.a('boolean');
                // expect(data.data.pitch.training_involved).to.be(false);
                expect(data.data.pitch.training_type).to.be.a('string');
                // expect(data.data.pitch.training_type).to.be("");
                expect(data.data.pitch.training_amount_people).to.be.a('number');
                // expect(data.data.pitch.training_amount_people).to.be(0);
                expect(data.data.pitch.people_working_in).to.be.a('string');
                // expect(data.data.pitch.people_working_in).to.be("");
                expect(data.data.pitch.people_amount_nearby).to.be.a('number');
                // expect(data.data.pitch.people_amount_nearby).to.be(0);
                expect(data.data.pitch.people_amount_abroad).to.be.a('number');
                // expect(data.data.pitch.people_amount_abroad).to.be(0);
                expect(data.data.pitch.people_amount_employees).to.be.a('number');
                // expect(data.data.pitch.people_amount_employees).to.be(0);
                expect(data.data.pitch.people_amount_volunteers).to.be.a('number');
                // expect(data.data.pitch.people_amount_volunteers).to.be(0);
                expect(data.data.pitch.benefited_people).to.be.a('number');
                // expect(data.data.pitch.benefited_people).to.be(0);
                expect(data.data.pitch.future_maintenance).to.be.a('string');
                // expect(data.data.pitch.future_maintenance).to.be("");
                expect(data.data.pitch.use_of_resources).to.be.a('string');
                // expect(data.data.pitch.use_of_resources).to.be("");
              {
                let dataCtr = data.data.pitch_contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferContacts);
                  expect(data.user_id).to.be.a('number');
                  // expect(data.user_id).to.be(0);
                  expect(data.team_member_id).to.be.a('number');
                  // expect(data.team_member_id).to.be(0);
                }
              }
              {
                let dataCtr = data.data.pitch_documents;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadOfferDocuments);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.document).to.be.a('string');
                  // expect(data.document).to.be("");
                }
              }
              {
                let dataCtr = data.data.carbon_certifications;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadCarbonCertifications);
                  expect(data.type).to.be.a('string');
                  // expect(data.type).to.be("");
                  expect(data.other_value).to.be.a('string');
                  // expect(data.other_value).to.be("");
                  expect(data.link).to.be.a('string');
                  // expect(data.link).to.be("");
                }
              }
              {
                let dataCtr = data.data.restoration_method_metrics;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadRestorationMethodMetrics);
                  expect(data.restoration_method).to.be.a('string');
                  // expect(data.restoration_method).to.be("");
                  expect(data.experience).to.be.a('number');
                  // expect(data.experience).to.be(0);
                  expect(data.land_size).to.be.a('number');
                  // expect(data.land_size).to.be(0.0);
                  expect(data.price_per_hectare).to.be.a('number');
                  // expect(data.price_per_hectare).to.be(0.0);
                  expect(data.biomass_per_hectare).to.be.a('number');
                  // expect(data.biomass_per_hectare).to.be(0.0);
                  expect(data.carbon_impact).to.be.a('number');
                  // expect(data.carbon_impact).to.be(0.0);
                  {
                    let dataCtr = data.species_impacted;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      // expect(data).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.data.tree_species;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataReadTreeSpecies);
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                  expect(data.is_native).to.be.a('boolean');
                  // expect(data.is_native).to.be(false);
                  expect(data.count).to.be.a('number');
                  // expect(data.count).to.be(0);
                  expect(data.price_to_plant).to.be.a('number');
                  // expect(data.price_to_plant).to.be(0.0);
                  expect(data.price_to_maintain).to.be.a('number');
                  // expect(data.price_to_maintain).to.be(0.0);
                  expect(data.saplings).to.be.a('number');
                  // expect(data.saplings).to.be(0.0);
                  expect(data.site_prep).to.be.a('number');
                  // expect(data.site_prep).to.be(0.0);
                  expect(data.survival_rate).to.be.a('number');
                  // expect(data.survival_rate).to.be(0);
                  expect(data.produces_food).to.be.a('boolean');
                  // expect(data.produces_food).to.be(false);
                  expect(data.produces_firewood).to.be.a('boolean');
                  // expect(data.produces_firewood).to.be(false);
                  expect(data.produces_timber).to.be.a('boolean');
                  // expect(data.produces_timber).to.be(false);
                  expect(data.owner).to.be.a('string');
                  // expect(data.owner).to.be("");
                  expect(data.season).to.be.a('string');
                  // expect(data.season).to.be("");
                }
              }
            expect(data.created_at).to.be.a(Date);
            // expect(data.created_at).to.be(new Date());
            expect(data.created_by).to.be.a('number');
            // expect(data.created_by).to.be(0);
            expect(data.updated_at).to.be.a(Date);
            // expect(data.updated_at).to.be(new Date());
            expect(data.updated_by).to.be.a('number');
            // expect(data.updated_by).to.be(0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
